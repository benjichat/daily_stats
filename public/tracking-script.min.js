!function () {
  const e = {
    apiUrl: "https://78dc-92-34-159-145.ngrok-free.app/track",
    batchSize: 10,
    batchInterval: 10000,
    trackedEvents: ["click", "mousemove", "mouseover", "mouseout", "scroll", "keydown", "keyup", "keypress", "input", "change", "submit"],
    debounceTime: 100
  },
    t = (window.myTrackingConfig || {}).customerId || "default-customer-id",
    n = [];
  let o;

  function a(t) {
    "mousemove" === t.type ? (o && clearTimeout(o), o = setTimeout((() => {
      i(t);
    }), e.debounceTime)) : i(t);
  }

  function i(t) {
    const o = {
      type: t.type,
      target: t.target.tagName,
      timestamp: Date.now(),
      position_x: t.clientX,
      position_y: t.clientY,
      key: t.key || null,
      keyCode: t.keyCode || null,
      inputType: t.inputType || null,
      inputValue: t.target.value || null,
      viewportWidth: window.innerWidth,
      viewportHeight: window.innerHeight
    };
    n.push(o), n.length >= e.batchSize && (c(n), n.length = 0);
  }

  function c(n) {
    const o = {
      customerId: t,
      events: n
    };
    const payload = JSON.stringify(o);

    if (navigator.sendBeacon) {
      const blob = new Blob([payload], { type: 'application/json' });
      navigator.sendBeacon(e.apiUrl, blob);
    } else {
      fetch(e.apiUrl, {
        method: 'POST',
        body: payload,
        headers: {
          'Content-Type': 'application/json'
        }
      });
    }
  }

  setInterval((() => {
    n.length > 0 && (c(n), n.length = 0);
  }), e.batchInterval);
  const s = { passive: !0, capture: !0 };
  e.trackedEvents.forEach((e => {
    document.addEventListener(e, a, s);
  }));

  // Capture navigation events
  window.addEventListener('popstate', a, s);
  const originalPushState = history.pushState;
  history.pushState = function (...args) {
    originalPushState.apply(history, args);
    a({ type: 'pushState', target: document });
  };

  const originalReplaceState = history.replaceState;
  history.replaceState = function (...args) {
    originalReplaceState.apply(history, args);
    a({ type: 'replaceState', target: document });
  };
}();
